import{_ as n,c as a,o as s,a as e}from"./app.0975428b.js";const m='{"title":"Pages","description":"","frontmatter":{},"headers":[{"level":2,"title":"The page file","slug":"the-page-file"},{"level":3,"title":"Template","slug":"template"},{"level":3,"title":"Component","slug":"component"},{"level":2,"title":"Dev Server","slug":"dev-server"},{"level":3,"title":"With the .html extension","slug":"with-the-html-extension"},{"level":3,"title":"Without the .html extension","slug":"without-the-html-extension"},{"level":3,"title":"In folders","slug":"in-folders"}],"relativePath":"combinations/muban/pages.md","lastUpdated":1647605642000}',t={},o=e(`<h1 id="pages" tabindex="-1">Pages <a class="header-anchor" href="#pages" aria-hidden="true">#</a></h1><p>The &quot;pages&quot; in the Muban Skeleton are purely for previewing your components (locally) before any server rendered pages are available. Individual components can be previewed in storybook, but pages offer a more complete way of seeing multiple components together, surrounded by an optional header or footer, or animating when they scroll into view.</p><p>Since pages are rendered by templates, which is normally done on the server, the TypeScript components don&#39;t have any influence on how they are rendered - they merely become active after the markup is rendered.</p><p>Component templates require data, and since the TypeScript components cannot provide that data, it has to come from somewhere else. Each &quot;page&quot; is a TypeScript file that exports a <code>data</code> function, and contains all the data that is needed to render all the templates for that page. Moreover, the &quot;page&quot; files often decide which components are rendered on the page.</p><h2 id="the-page-file" tabindex="-1">The page file <a class="header-anchor" href="#the-page-file" aria-hidden="true">#</a></h2><p>To summarize before we start, the page file:</p><ul><li>Is located in the <code>/src/pages/</code> folder.</li><li>Has its filename written in <code>snake-case.ts</code>.</li><li>Has to export a <code>data</code> function that should return an object according to the <code>AppTemplateProps</code> shape.</li><li>Can optionally export additional info that contains information for the page&#39;s <code>&lt;head&gt;</code>.</li><li>Can exist in sub-folders (e.g. <code>/src/pages/about/contacts.ts</code>).</li><li>Will be generated as a <code>.html</code> file with the same name/path.</li></ul><p>In short, it should look like this.</p><div class="language-ts"><pre><code><span class="token comment">// pages/index.ts</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> AppTemplateProps <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../App.template&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// this is required</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> AppTemplateProps <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">// ... page data</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// and some optional exports</span>

<span class="token comment">// is added as &lt;title&gt;The Page Title&lt;/title&gt;</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> title <span class="token operator">=</span> <span class="token string">&#39;The Page Title&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// is added as &lt;meta name=&quot;description&quot; content=&quot;The page description&quot; &gt;</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> meta <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> AppTemplateProps <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token string">&#39;description&#39;</span><span class="token punctuation">,</span>
    content<span class="token operator">:</span> <span class="token string">&#39;The page description&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// is added as &lt;link rel=&quot;stylesheet&quot; href=&quot;some-css-file.css&quot; /&gt;</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> link <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> AppTemplateProps <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    rel<span class="token operator">:</span> <span class="token string">&#39;stylesheet&#39;</span><span class="token punctuation">,</span>
    href<span class="token operator">:</span> <span class="token string">&#39;some-css-file.css&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre></div><div class="tip custom-block"><p class="custom-block-title">Ignoring files and folders</p><p>Any file or folder in the <code>src/pages</code> folder starting with a <code>_</code> will be ignored when generating page templates. So if you&#39;re looking to share some data or utilities only used for pages, you can prefix the file with a <code>_</code> and still have it located in the <code>src/pages</code> folder, without a page being created for it.</p></div><h3 id="template" tabindex="-1">Template <a class="header-anchor" href="#template" aria-hidden="true">#</a></h3><p>For each page that we render, we start with the <code>appTemplate</code> - it also has a corresponding <code>App</code> component that will be mounted after the page has been rendered. The <code>appTemplate</code> decides which child templates to render for each specific page based on the data provided for that page. It does so by creating a &quot;map&quot; with all possible templates, and based on the data for that page, it picks one (or multiple) templates to render, passing along the props that belong with that child template.</p><div class="tip custom-block"><p class="custom-block-title">Types</p><p>Note that the data function&#39;s return type is typed as <code>AppTemplateProps</code>. This is because this function must return data that will be passed to the <code>appTemplate</code>. In turn, the <code>AppTemplateProps</code> will include the types of its child templates, making sure everything is typed, down to the leaf components.</p></div><p>The corresponding <code>App</code> component registers the same child components to initialize them whenever they are rendered on the page.</p><p>The <code>App</code> and the <code>BlockRenderer</code> are 2 components that make use of this method of dynamically rendering a child component. There are two variations: rendering a single child component (selected from multiple options), or rendering a list of child components (each one selected from multiple options).</p><div class="language-ts"><pre><code><span class="token comment">// App.template.ts</span>

<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">AppTemplateProps</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  layout<span class="token operator">:</span>
    <span class="token operator">|</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token keyword">typeof</span> LayoutDefault<span class="token punctuation">.</span>displayName<span class="token punctuation">;</span> props<span class="token operator">:</span> LayoutDefaultTemplateProps <span class="token punctuation">}</span>
    <span class="token operator">|</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token keyword">typeof</span> LayoutCustom<span class="token punctuation">.</span>displayName<span class="token punctuation">;</span> props<span class="token operator">:</span> LayoutCustomTemplateProps <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">appTemplate</span><span class="token punctuation">(</span><span class="token punctuation">{</span> layout <span class="token punctuation">}</span><span class="token operator">:</span> AppTemplateProps<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> html<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;div data-component=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>App<span class="token punctuation">.</span>displayName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&gt;
    </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">renderLazyComponentTemplate</span><span class="token punctuation">(</span>
      <span class="token punctuation">{</span>
        <span class="token punctuation">[</span>LayoutDefault<span class="token punctuation">.</span>displayName<span class="token punctuation">]</span><span class="token operator">:</span> layoutDefaultTemplate<span class="token punctuation">,</span>
        <span class="token punctuation">[</span>LayoutCustom<span class="token punctuation">.</span>displayName<span class="token punctuation">]</span><span class="token operator">:</span> layoutCustomTemplate<span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span> component<span class="token operator">:</span> layout <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">
  &lt;/div&gt;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Some things to highlight:</p><ul><li><p>In the App template, we can choose 1 layout to render for this page</p></li><li><p>In the template function, we use the <code>renderLazyComponentTemplate</code> helper to:</p><ul><li>register the available options, using the component <code>displayName</code> as key</li><li>pass either <code>component</code> (in this case) or <code>components</code> (to render multiple)</li></ul></li><li><p>In <code>AppTemplateProps</code>, we use a union of all the possible child components to render, for each one providing its name and its props.</p></li></ul><h3 id="component" tabindex="-1">Component <a class="header-anchor" href="#component" aria-hidden="true">#</a></h3><p>The component is simpler, just listing the child components to initialize, using the <code>lazy</code> helper to support code splitting.</p><div class="language-ts"><pre><code><span class="token comment">// App.ts</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> App <span class="token operator">=</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token string">&#39;app&#39;</span><span class="token punctuation">,</span>
  components<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token function">lazy</span><span class="token punctuation">(</span>
      <span class="token string">&#39;layout-default&#39;</span><span class="token punctuation">,</span>
      <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;./components/layouts/DefaultLayout&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">lazy</span><span class="token punctuation">(</span>
      <span class="token string">&#39;layout-custom&#39;</span><span class="token punctuation">,</span>
      <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;./components/layouts/CustomLayout&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="dev-server" tabindex="-1">Dev Server <a class="header-anchor" href="#dev-server" aria-hidden="true">#</a></h2><p>The Dev Server makes these pages available in the browser in the following ways:</p><h3 id="with-the-html-extension" tabindex="-1">With the .html extension <a class="header-anchor" href="#with-the-html-extension" aria-hidden="true">#</a></h3><ul><li><code>/index.html</code> loads <code>/src/pages/index.ts</code></li><li><code>/news.html</code> loads <code>/src/pages/news.ts</code></li></ul><h3 id="without-the-html-extension" tabindex="-1">Without the .html extension <a class="header-anchor" href="#without-the-html-extension" aria-hidden="true">#</a></h3><ul><li><code>/</code> loads <code>/src/pages/index.ts</code></li><li><code>/news</code> loads <code>/src/pages/news.ts</code></li></ul><h3 id="in-folders" tabindex="-1">In folders <a class="header-anchor" href="#in-folders" aria-hidden="true">#</a></h3><ul><li><code>/news/index.html</code> loads <code>/src/pages/news/index.ts</code></li><li><code>/news/overview.html</code> loads <code>/src/pages/news/overview.ts</code></li><li><code>/news</code> loads <code>/src/pages/news/index.ts</code></li><li><code>/news/overview</code> loads <code>/src/pages/news/overview.ts</code></li></ul><p>Or including a trailing /</p><ul><li><code>/news/</code> loads <code>/src/pages/news/index.ts</code></li><li><code>/news/overview/</code> loads <code>/src/pages/news/overview.ts</code></li></ul>`,31),p=[o];function c(l,i,r,u,d,k){return s(),a("div",null,p)}var g=n(t,[["render",c]]);export{m as __pageData,g as default};
